#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ALPHA   0
#define NUM     1
#define ARROW   2
#define FKEYS   3 
#define SYSTEM  4 

/ {
    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;  // Make sure that we don't accidentally fire twice.
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            // We use higher timeouts here because these modifiers are
            // used very deliberately (other than a SHIFT mod that
            // would be used in rapid typing). Having a higher timeout
            // means the quick_tap_ms feature feels more natural.
            tapping-term-ms = <250>;
            quick_tap_ms = <200>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
        bindings = <

        &kp DQT    &kp COMMA   &kp DOT        &kp P       &kp Y      &kp F  &kp G       &kp C        &kp R       &kp L
        &kp A      &hm LALT O  &hm LCTRL E    &hm LGUI U  &kp I      &kp D  &hm RGUI H  &hm RCTRL T  &hm RALT N  &kp S
        &kp COLON  &kp Q       &kp J          &kp K       &kp X      &kp B  &kp M       &kp W        &kp V       &kp Z

                                    &mt LC(LS(LALT)) ESC &kp SPACE      &skq LSHIFT  &sl NUM

        >;
        };

        // TODO: We have to wait for `&sl` to time out for `&caps_word` to work.
        num_and_signs {
        bindings = <

        &kp SQT   &kp UNDER  &kp AMPS   &kp LBRC  &kp RBRC     &kp QMARK  &kp N7  &kp N8  &kp N9  &kp BKSP
        &kp TAB   &kp MINUS  &kp EQUAL  &kp LPAR  &kp RPAR     &kp EXCL   &kp N4  &kp N5  &kp N6  &trans
        &kp SEMI  &kp AT     &kp PIPE   &kp LBKT  &kp RBKT     &kp N0     &kp N1  &kp N2  &kp N3  &trans

                                      &sl ARROW  &kp ENTER     &caps_word  &trans  
        >;
        };

        arrow_and_signs {
        bindings = <

        &kp GRAV     &kp PRCNT  &kp HASH   &kp LT     &kp GT       &trans    &trans    &trans    &trans    &kp DEL    
        &kp LS(TAB)  &kp PLUS   &kp ASTRK  &kp DLLR   &kp CARET    &kp LARW  &kp DARW  &kp UARW  &kp RARW  &trans    
        &trans       &trans     &kp BSLH   &kp SLASH  &kp TILDE    &trans    &trans    &trans    &trans    &trans    

                                                    &trans  &trans    &trans  &sl FKEYS
        >;
        };

        // The switch to the SYSTEM layer is put on the second thumb key on purpose
        // to prevent accidental system layer activations.
        fkeys_and_media {
        bindings = <

        &trans  &kp C_VOL_UP  &kp C_NEXT        &trans  &trans      &kp F12  &kp F7  &kp F8  &kp F5  &trans  
        &trans  &kp C_VOL_DN  &kp C_PREV        &trans  &trans      &kp F11  &kp F4  &kp F5  &kp F4  &trans  
        &trans  &kp K_MUTE    &kp C_PLAY_PAUSE  &trans  &trans      &kp F10  &kp F1  &kp F2  &kp F3  &trans  

                            &trans  &sl SYSTEM  &trans  &trans
        >;
        };

        system {
        bindings = <

        &reset       &none  &none  &none      &bt BT_SEL 0    &none  &none  &none  &none  &reset
        &bootloader  &none  &none  &none      &bt BT_SEL 1    &none  &none  &none  &none  &bootloader
        &none        &none  &none  &bt BT_CLR &bt BT_SEL 2    &none  &none  &none  &none  &none

                                              &none  &none    &none  &none
        >;
        };
    };
};
